// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: communication.proto

package rpc_impl

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PersonMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId string `protobuf:"bytes,1,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Age      uint32 `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	Sex      string `protobuf:"bytes,4,opt,name=sex,proto3" json:"sex,omitempty"`
}

func (x *PersonMsg) Reset() {
	*x = PersonMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communication_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonMsg) ProtoMessage() {}

func (x *PersonMsg) ProtoReflect() protoreflect.Message {
	mi := &file_communication_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonMsg.ProtoReflect.Descriptor instead.
func (*PersonMsg) Descriptor() ([]byte, []int) {
	return file_communication_proto_rawDescGZIP(), []int{0}
}

func (x *PersonMsg) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *PersonMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PersonMsg) GetAge() uint32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *PersonMsg) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

type Big5Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Person            *PersonMsg `protobuf:"bytes,2,opt,name=person,proto3" json:"person,omitempty"`
	Conscientiousness float32    `protobuf:"fixed32,3,opt,name=conscientiousness,proto3" json:"conscientiousness,omitempty"`
	Openness          float32    `protobuf:"fixed32,4,opt,name=openness,proto3" json:"openness,omitempty"`
	Neuroticism       float32    `protobuf:"fixed32,5,opt,name=neuroticism,proto3" json:"neuroticism,omitempty"`
	Extraversion      float32    `protobuf:"fixed32,6,opt,name=extraversion,proto3" json:"extraversion,omitempty"`
	Agreeableness     float32    `protobuf:"fixed32,7,opt,name=agreeableness,proto3" json:"agreeableness,omitempty"`
}

func (x *Big5Msg) Reset() {
	*x = Big5Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communication_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Big5Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Big5Msg) ProtoMessage() {}

func (x *Big5Msg) ProtoReflect() protoreflect.Message {
	mi := &file_communication_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Big5Msg.ProtoReflect.Descriptor instead.
func (*Big5Msg) Descriptor() ([]byte, []int) {
	return file_communication_proto_rawDescGZIP(), []int{1}
}

func (x *Big5Msg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Big5Msg) GetPerson() *PersonMsg {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *Big5Msg) GetConscientiousness() float32 {
	if x != nil {
		return x.Conscientiousness
	}
	return 0
}

func (x *Big5Msg) GetOpenness() float32 {
	if x != nil {
		return x.Openness
	}
	return 0
}

func (x *Big5Msg) GetNeuroticism() float32 {
	if x != nil {
		return x.Neuroticism
	}
	return 0
}

func (x *Big5Msg) GetExtraversion() float32 {
	if x != nil {
		return x.Extraversion
	}
	return 0
}

func (x *Big5Msg) GetAgreeableness() float32 {
	if x != nil {
		return x.Agreeableness
	}
	return 0
}

type TeamRoleMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Person               *PersonMsg `protobuf:"bytes,2,opt,name=person,proto3" json:"person,omitempty"`
	ResourceInvestigator uint32     `protobuf:"varint,3,opt,name=resourceInvestigator,proto3" json:"resourceInvestigator,omitempty"`
	Teamworker           uint32     `protobuf:"varint,4,opt,name=teamworker,proto3" json:"teamworker,omitempty"`
	Coordinator          uint32     `protobuf:"varint,5,opt,name=coordinator,proto3" json:"coordinator,omitempty"`
	Plant                uint32     `protobuf:"varint,6,opt,name=plant,proto3" json:"plant,omitempty"`
	MonitorEvaluator     uint32     `protobuf:"varint,7,opt,name=monitorEvaluator,proto3" json:"monitorEvaluator,omitempty"`
	Specialist           uint32     `protobuf:"varint,8,opt,name=specialist,proto3" json:"specialist,omitempty"`
	Shaper               uint32     `protobuf:"varint,9,opt,name=shaper,proto3" json:"shaper,omitempty"`
	Implementer          uint32     `protobuf:"varint,10,opt,name=implementer,proto3" json:"implementer,omitempty"`
	CompleterFinisher    uint32     `protobuf:"varint,11,opt,name=completerFinisher,proto3" json:"completerFinisher,omitempty"`
}

func (x *TeamRoleMsg) Reset() {
	*x = TeamRoleMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communication_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamRoleMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamRoleMsg) ProtoMessage() {}

func (x *TeamRoleMsg) ProtoReflect() protoreflect.Message {
	mi := &file_communication_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamRoleMsg.ProtoReflect.Descriptor instead.
func (*TeamRoleMsg) Descriptor() ([]byte, []int) {
	return file_communication_proto_rawDescGZIP(), []int{2}
}

func (x *TeamRoleMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TeamRoleMsg) GetPerson() *PersonMsg {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *TeamRoleMsg) GetResourceInvestigator() uint32 {
	if x != nil {
		return x.ResourceInvestigator
	}
	return 0
}

func (x *TeamRoleMsg) GetTeamworker() uint32 {
	if x != nil {
		return x.Teamworker
	}
	return 0
}

func (x *TeamRoleMsg) GetCoordinator() uint32 {
	if x != nil {
		return x.Coordinator
	}
	return 0
}

func (x *TeamRoleMsg) GetPlant() uint32 {
	if x != nil {
		return x.Plant
	}
	return 0
}

func (x *TeamRoleMsg) GetMonitorEvaluator() uint32 {
	if x != nil {
		return x.MonitorEvaluator
	}
	return 0
}

func (x *TeamRoleMsg) GetSpecialist() uint32 {
	if x != nil {
		return x.Specialist
	}
	return 0
}

func (x *TeamRoleMsg) GetShaper() uint32 {
	if x != nil {
		return x.Shaper
	}
	return 0
}

func (x *TeamRoleMsg) GetImplementer() uint32 {
	if x != nil {
		return x.Implementer
	}
	return 0
}

func (x *TeamRoleMsg) GetCompleterFinisher() uint32 {
	if x != nil {
		return x.CompleterFinisher
	}
	return 0
}

type ExpertiseMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Person           *PersonMsg `protobuf:"bytes,2,opt,name=person,proto3" json:"person,omitempty"`
	CurrentExpertise []string   `protobuf:"bytes,3,rep,name=currentExpertise,proto3" json:"currentExpertise,omitempty"`
	DevelopmentGoals []string   `protobuf:"bytes,4,rep,name=developmentGoals,proto3" json:"developmentGoals,omitempty"`
}

func (x *ExpertiseMsg) Reset() {
	*x = ExpertiseMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communication_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpertiseMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpertiseMsg) ProtoMessage() {}

func (x *ExpertiseMsg) ProtoReflect() protoreflect.Message {
	mi := &file_communication_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpertiseMsg.ProtoReflect.Descriptor instead.
func (*ExpertiseMsg) Descriptor() ([]byte, []int) {
	return file_communication_proto_rawDescGZIP(), []int{3}
}

func (x *ExpertiseMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExpertiseMsg) GetPerson() *PersonMsg {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *ExpertiseMsg) GetCurrentExpertise() []string {
	if x != nil {
		return x.CurrentExpertise
	}
	return nil
}

func (x *ExpertiseMsg) GetDevelopmentGoals() []string {
	if x != nil {
		return x.DevelopmentGoals
	}
	return nil
}

type ManagerialMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Person             *PersonMsg `protobuf:"bytes,2,opt,name=person,proto3" json:"person,omitempty"`
	Communication      uint32     `protobuf:"varint,3,opt,name=communication,proto3" json:"communication,omitempty"`
	Adaptability       uint32     `protobuf:"varint,4,opt,name=adaptability,proto3" json:"adaptability,omitempty"`
	ConflictResolution uint32     `protobuf:"varint,5,opt,name=conflictResolution,proto3" json:"conflictResolution,omitempty"`
	DecisionMaking     uint32     `protobuf:"varint,6,opt,name=decisionMaking,proto3" json:"decisionMaking,omitempty"`
	Leadership         uint32     `protobuf:"varint,7,opt,name=leadership,proto3" json:"leadership,omitempty"`
	ExperienceYears    uint32     `protobuf:"varint,8,opt,name=experienceYears,proto3" json:"experienceYears,omitempty"`
}

func (x *ManagerialMsg) Reset() {
	*x = ManagerialMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communication_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagerialMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerialMsg) ProtoMessage() {}

func (x *ManagerialMsg) ProtoReflect() protoreflect.Message {
	mi := &file_communication_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerialMsg.ProtoReflect.Descriptor instead.
func (*ManagerialMsg) Descriptor() ([]byte, []int) {
	return file_communication_proto_rawDescGZIP(), []int{4}
}

func (x *ManagerialMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ManagerialMsg) GetPerson() *PersonMsg {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *ManagerialMsg) GetCommunication() uint32 {
	if x != nil {
		return x.Communication
	}
	return 0
}

func (x *ManagerialMsg) GetAdaptability() uint32 {
	if x != nil {
		return x.Adaptability
	}
	return 0
}

func (x *ManagerialMsg) GetConflictResolution() uint32 {
	if x != nil {
		return x.ConflictResolution
	}
	return 0
}

func (x *ManagerialMsg) GetDecisionMaking() uint32 {
	if x != nil {
		return x.DecisionMaking
	}
	return 0
}

func (x *ManagerialMsg) GetLeadership() uint32 {
	if x != nil {
		return x.Leadership
	}
	return 0
}

func (x *ManagerialMsg) GetExperienceYears() uint32 {
	if x != nil {
		return x.ExperienceYears
	}
	return 0
}

type GroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Persons []*PersonMsg `protobuf:"bytes,1,rep,name=persons,proto3" json:"persons,omitempty"`
}

func (x *GroupList) Reset() {
	*x = GroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communication_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupList) ProtoMessage() {}

func (x *GroupList) ProtoReflect() protoreflect.Message {
	mi := &file_communication_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupList.ProtoReflect.Descriptor instead.
func (*GroupList) Descriptor() ([]byte, []int) {
	return file_communication_proto_rawDescGZIP(), []int{5}
}

func (x *GroupList) GetPersons() []*PersonMsg {
	if x != nil {
		return x.Persons
	}
	return nil
}

type GraphComputationResMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompatibilityThreshold  float32               `protobuf:"fixed32,1,opt,name=compatibility_threshold,json=compatibilityThreshold,proto3" json:"compatibility_threshold,omitempty"`
	EdgeDistances           map[string]float32    `protobuf:"bytes,2,rep,name=edge_distances,json=edgeDistances,proto3" json:"edge_distances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	ClosenessCentralities   map[string]float32    `protobuf:"bytes,3,rep,name=closeness_centralities,json=closenessCentralities,proto3" json:"closeness_centralities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	BetweennessCentralities map[string]float32    `protobuf:"bytes,4,rep,name=betweenness_centralities,json=betweennessCentralities,proto3" json:"betweenness_centralities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	SilhouetteScore         map[string]float32    `protobuf:"bytes,5,rep,name=silhouette_score,json=silhouetteScore,proto3" json:"silhouette_score,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Groups                  map[string]*GroupList `protobuf:"bytes,6,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GraphPlotURL            string                `protobuf:"bytes,7,opt,name=graphPlotURL,proto3" json:"graphPlotURL,omitempty"`
}

func (x *GraphComputationResMsg) Reset() {
	*x = GraphComputationResMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communication_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphComputationResMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphComputationResMsg) ProtoMessage() {}

func (x *GraphComputationResMsg) ProtoReflect() protoreflect.Message {
	mi := &file_communication_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphComputationResMsg.ProtoReflect.Descriptor instead.
func (*GraphComputationResMsg) Descriptor() ([]byte, []int) {
	return file_communication_proto_rawDescGZIP(), []int{6}
}

func (x *GraphComputationResMsg) GetCompatibilityThreshold() float32 {
	if x != nil {
		return x.CompatibilityThreshold
	}
	return 0
}

func (x *GraphComputationResMsg) GetEdgeDistances() map[string]float32 {
	if x != nil {
		return x.EdgeDistances
	}
	return nil
}

func (x *GraphComputationResMsg) GetClosenessCentralities() map[string]float32 {
	if x != nil {
		return x.ClosenessCentralities
	}
	return nil
}

func (x *GraphComputationResMsg) GetBetweennessCentralities() map[string]float32 {
	if x != nil {
		return x.BetweennessCentralities
	}
	return nil
}

func (x *GraphComputationResMsg) GetSilhouetteScore() map[string]float32 {
	if x != nil {
		return x.SilhouetteScore
	}
	return nil
}

func (x *GraphComputationResMsg) GetGroups() map[string]*GroupList {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GraphComputationResMsg) GetGraphPlotURL() string {
	if x != nil {
		return x.GraphPlotURL
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communication_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_communication_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_communication_proto_rawDescGZIP(), []int{7}
}

var File_communication_proto protoreflect.FileDescriptor

var file_communication_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x22,
	0x60, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65,
	0x78, 0x22, 0xfc, 0x01, 0x0a, 0x07, 0x42, 0x69, 0x67, 0x35, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4d,
	0x73, 0x67, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x75, 0x73, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x74, 0x69, 0x63,
	0x69, 0x73, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6e, 0x65, 0x75, 0x72, 0x6f,
	0x74, 0x69, 0x63, 0x69, 0x73, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x67,
	0x72, 0x65, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x61, 0x67, 0x72, 0x65, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x22, 0x8a, 0x03, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x73, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2b, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x70, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x61, 0x70, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x72, 0x22, 0xa3, 0x01,
	0x0a, 0x0c, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x4d, 0x73, 0x67, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6f,
	0x61, 0x6c, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x0d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x59, 0x65, 0x61, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x59, 0x65, 0x61, 0x72, 0x73, 0x22, 0x3a,
	0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4d, 0x73,
	0x67, 0x52, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0xd3, 0x07, 0x0a, 0x16, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x5a,
	0x0a, 0x0e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70,
	0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x4d, 0x73, 0x67, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x65, 0x64, 0x67,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x16, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x70, 0x63,
	0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x4d, 0x73, 0x67, 0x2e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x78,
	0x0a, 0x18, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x4d,
	0x73, 0x67, 0x2e, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x17, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x10, 0x73, 0x69, 0x6c, 0x68,
	0x6f, 0x75, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x69, 0x6c, 0x68, 0x6f, 0x75, 0x65, 0x74, 0x74, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x69, 0x6c, 0x68, 0x6f,
	0x75, 0x65, 0x74, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x70, 0x63,
	0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x50, 0x6c, 0x6f, 0x74, 0x55, 0x52, 0x4c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x50, 0x6c, 0x6f,
	0x74, 0x55, 0x52, 0x4c, 0x1a, 0x40, 0x0a, 0x12, 0x45, 0x64, 0x67, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x1a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4a, 0x0a, 0x1c, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14,
	0x53, 0x69, 0x6c, 0x68, 0x6f, 0x75, 0x65, 0x74, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4e, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xda, 0x02, 0x0a, 0x17, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x69, 0x67,
	0x35, 0x4d, 0x73, 0x67, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e,
	0x42, 0x69, 0x67, 0x35, 0x4d, 0x73, 0x67, 0x1a, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d,
	0x70, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0f, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x15, 0x2e,
	0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x6c,
	0x65, 0x4d, 0x73, 0x67, 0x1a, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x4d, 0x73, 0x67, 0x1a, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x17, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4d, 0x73, 0x67, 0x1a, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x12, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x20, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x66, 0x69, 0x6c, 0x69, 0x63, 0x68, 0x2f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_communication_proto_rawDescOnce sync.Once
	file_communication_proto_rawDescData = file_communication_proto_rawDesc
)

func file_communication_proto_rawDescGZIP() []byte {
	file_communication_proto_rawDescOnce.Do(func() {
		file_communication_proto_rawDescData = protoimpl.X.CompressGZIP(file_communication_proto_rawDescData)
	})
	return file_communication_proto_rawDescData
}

var file_communication_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_communication_proto_goTypes = []interface{}{
	(*PersonMsg)(nil),              // 0: rpc_impl.PersonMsg
	(*Big5Msg)(nil),                // 1: rpc_impl.Big5Msg
	(*TeamRoleMsg)(nil),            // 2: rpc_impl.TeamRoleMsg
	(*ExpertiseMsg)(nil),           // 3: rpc_impl.ExpertiseMsg
	(*ManagerialMsg)(nil),          // 4: rpc_impl.ManagerialMsg
	(*GroupList)(nil),              // 5: rpc_impl.GroupList
	(*GraphComputationResMsg)(nil), // 6: rpc_impl.GraphComputationResMsg
	(*Empty)(nil),                  // 7: rpc_impl.Empty
	nil,                            // 8: rpc_impl.GraphComputationResMsg.EdgeDistancesEntry
	nil,                            // 9: rpc_impl.GraphComputationResMsg.ClosenessCentralitiesEntry
	nil,                            // 10: rpc_impl.GraphComputationResMsg.BetweennessCentralitiesEntry
	nil,                            // 11: rpc_impl.GraphComputationResMsg.SilhouetteScoreEntry
	nil,                            // 12: rpc_impl.GraphComputationResMsg.GroupsEntry
}
var file_communication_proto_depIdxs = []int32{
	0,  // 0: rpc_impl.Big5Msg.person:type_name -> rpc_impl.PersonMsg
	0,  // 1: rpc_impl.TeamRoleMsg.person:type_name -> rpc_impl.PersonMsg
	0,  // 2: rpc_impl.ExpertiseMsg.person:type_name -> rpc_impl.PersonMsg
	0,  // 3: rpc_impl.ManagerialMsg.person:type_name -> rpc_impl.PersonMsg
	0,  // 4: rpc_impl.GroupList.persons:type_name -> rpc_impl.PersonMsg
	8,  // 5: rpc_impl.GraphComputationResMsg.edge_distances:type_name -> rpc_impl.GraphComputationResMsg.EdgeDistancesEntry
	9,  // 6: rpc_impl.GraphComputationResMsg.closeness_centralities:type_name -> rpc_impl.GraphComputationResMsg.ClosenessCentralitiesEntry
	10, // 7: rpc_impl.GraphComputationResMsg.betweenness_centralities:type_name -> rpc_impl.GraphComputationResMsg.BetweennessCentralitiesEntry
	11, // 8: rpc_impl.GraphComputationResMsg.silhouette_score:type_name -> rpc_impl.GraphComputationResMsg.SilhouetteScoreEntry
	12, // 9: rpc_impl.GraphComputationResMsg.groups:type_name -> rpc_impl.GraphComputationResMsg.GroupsEntry
	5,  // 10: rpc_impl.GraphComputationResMsg.GroupsEntry.value:type_name -> rpc_impl.GroupList
	1,  // 11: rpc_impl.QuantifierCommunication.SendBig5Msg:input_type -> rpc_impl.Big5Msg
	2,  // 12: rpc_impl.QuantifierCommunication.SendTeamRoleMsg:input_type -> rpc_impl.TeamRoleMsg
	3,  // 13: rpc_impl.QuantifierCommunication.SendExpertiseMsg:input_type -> rpc_impl.ExpertiseMsg
	4,  // 14: rpc_impl.QuantifierCommunication.SendManagerialMsg:input_type -> rpc_impl.ManagerialMsg
	7,  // 15: rpc_impl.QuantifierCommunication.GetGraphComputationRes:input_type -> rpc_impl.Empty
	7,  // 16: rpc_impl.QuantifierCommunication.SendBig5Msg:output_type -> rpc_impl.Empty
	7,  // 17: rpc_impl.QuantifierCommunication.SendTeamRoleMsg:output_type -> rpc_impl.Empty
	7,  // 18: rpc_impl.QuantifierCommunication.SendExpertiseMsg:output_type -> rpc_impl.Empty
	7,  // 19: rpc_impl.QuantifierCommunication.SendManagerialMsg:output_type -> rpc_impl.Empty
	6,  // 20: rpc_impl.QuantifierCommunication.GetGraphComputationRes:output_type -> rpc_impl.GraphComputationResMsg
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_communication_proto_init() }
func file_communication_proto_init() {
	if File_communication_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_communication_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communication_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Big5Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communication_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamRoleMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communication_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpertiseMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communication_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagerialMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communication_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communication_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphComputationResMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communication_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_communication_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_communication_proto_goTypes,
		DependencyIndexes: file_communication_proto_depIdxs,
		MessageInfos:      file_communication_proto_msgTypes,
	}.Build()
	File_communication_proto = out.File
	file_communication_proto_rawDesc = nil
	file_communication_proto_goTypes = nil
	file_communication_proto_depIdxs = nil
}
